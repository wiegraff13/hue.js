{
  "name": "hue.js",
  "version": "0.2.13",
  "description": "Library for interacting with a Phillips Hue base station",
  "main": "index.js",
  "scripts": {
    "test": "npm test"
  },
  "dependencies": {
    "request": "2.12.0",
    "async": "~0.1.22",
    "xml2js": "^0.4.4"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "repository": {
    "type": "git",
    "url": "github.com:thatguydan/hue.js.git"
  },
  "keywords": [
    "Philips",
    "Hue",
    "Light"
  ],
  "author": {
    "name": "Daniel Friedman"
  },
  "license": "MIT",
  "readme": "Node Hue Module\n---\nThis library aims to provide a simple interface to a Philips Hue bridge (http://www.meethue.com/).\n\nA Hue bridge requires your 'app' to register with the bridge. This process involves a user pressing the link button on the hue, and your app making a request to its API to complete the process.\n\n## To install\n```\nnpm install hue.js\n```\n\n## To use\n```javascript\nvar Hue = require('hue.js');\n```\n\n## Discover Hue Bridges\n```javascript\n\nHue.discover(function(stations) {\n\n  console.log(stations);\n});\n```\n\n## Register your app\n```javascript\n\nvar client = Hue.createClient({\n  stationIp:station, // 'x.x.x.x', retrieved from the previous step\n  appName:appName // Any alpha numeric name for your app\n});\n\nclient.lights(function(err,lights) {\n\n  if (err && err.type === 1) {\n    // App has not been registered\n\n    console.log(\"Please go and press the link button on your base station(s)\");\n    client.register(function(err) {\n\n      if (err) {\n        // Could not register\n      } else {\n        // Registered, carry on\n      }\n    });\n  } else {\n    console.log(lights);\n  }\n});\n```\n\n## Hue API\n### Hue.createClient(opts)\n`opts` being `stationIp` ip address and an `appName`. Returns a hue `client`.\n\n### Hue.Discover(cb)\nDiscovers hue bridges on your local network.\n\n## Client API\n\n### client.register(opts,cb)\nAttempt to register your app with the base station. `opts` has 4 optional properties.\n\n* `username` - the username to register. Default to a md5 hash based upon the value of the `appName` configured when calling `createClient`\n* `deviceType` - the device type to register. Defaults to the value of the `appName` that was set when calling `createClient`. \n* `interval` - the amount of time to wait in milliseconds before attempting to register again. Defaults to 3000.\n* `attempts` - the number of retry attempts before giving up. This will error out if registration was not successful. Defaults to 0.\n\n### client.unregister([username],cb)\nUngregisters (unpair) your app. All future calls will be unauthorised by the base station until your app is reregistered.\n\nWith the optional `username` parameter the username of the application that should be unregistered can be specified. This value defaults to the username of the current application that was determined when calling `createClient`.\n\n### client.config([opts],cb)\nFetch or if `opts` is specified update, the configuration of this base station. [See here](http://burgestrand.github.com/hue-api/api/config/#updating-bridge-configuration) for a station's properties.\n\n### client.lights(cb)\nFetch the list of the lights associated with this base station\n\n### client.light(light,cb)\nFetch the state data about 1 light, `light` being its index received from client.lights(...)\n\n### client.state(light,state,cb)\nUpdate the state of a light, `light` being its index received from client.lights(...) and `state` being an object with properties [defined here](http://burgestrand.github.com/hue-api/api/lights/#changing-light-color-and-turning-them-onoff)\n\n### client.on(light,cb) client.off(light,cb)\nTurn on/off that light, `light` being the index received from the client.lights(...)\n\n### client.rgb(light,R,G,B,cb)\nChange the RGB colour of the light. Note 0,0,0, is not `off`.\n\n### client.rename(light,name,cb)\nChange the light's name to the string `name`, where `light` is the index received from `client.clients()`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thatguydan/hue.js/issues"
  },
  "homepage": "https://github.com/thatguydan/hue.js",
  "_id": "hue.js@0.2.13",
  "_from": "hue.js@"
}
